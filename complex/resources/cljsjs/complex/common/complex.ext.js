/**********************************************************************
 * Extern for Complex
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var Complex = {
  "default": function() {},
  "E": {
    "abs": function () {},
    "acos": function () {},
    "acosh": function () {},
    "acot": function () {},
    "acoth": function () {},
    "acsc": function () {},
    "acsch": function () {},
    "add": function () {},
    "arg": function () {},
    "asec": function () {},
    "asech": function () {},
    "asin": function () {},
    "asinh": function () {},
    "atan": function () {},
    "atanh": function () {},
    "ceil": function () {},
    "clone": function () {},
    "conjugate": function () {},
    "cos": function () {},
    "cosh": function () {},
    "cot": function () {},
    "coth": function () {},
    "csc": function () {},
    "csch": function () {},
    "div": function () {},
    "equals": function () {},
    "exp": function () {},
    "expm1": function () {},
    "floor": function () {},
    "im": {},
    "inverse": function () {},
    "isFinite": function () {},
    "isInfinite": function () {},
    "isNaN": function () {},
    "isZero": function () {},
    "log": function () {},
    "mul": function () {},
    "neg": function () {},
    "pow": function () {},
    "re": {},
    "round": function () {},
    "sec": function () {},
    "sech": function () {},
    "sign": function () {},
    "sin": function () {},
    "sinh": function () {},
    "sqrt": function () {},
    "sub": function () {},
    "tan": function () {},
    "tanh": function () {},
    "toString": function () {},
    "toVector": function () {},
    "valueOf": function () {}
  },
  "EPSILON": {},
  "I": {
    "abs": function () {},
    "acos": function () {},
    "acosh": function () {},
    "acot": function () {},
    "acoth": function () {},
    "acsc": function () {},
    "acsch": function () {},
    "add": function () {},
    "arg": function () {},
    "asec": function () {},
    "asech": function () {},
    "asin": function () {},
    "asinh": function () {},
    "atan": function () {},
    "atanh": function () {},
    "ceil": function () {},
    "clone": function () {},
    "conjugate": function () {},
    "cos": function () {},
    "cosh": function () {},
    "cot": function () {},
    "coth": function () {},
    "csc": function () {},
    "csch": function () {},
    "div": function () {},
    "equals": function () {},
    "exp": function () {},
    "expm1": function () {},
    "floor": function () {},
    "im": {},
    "inverse": function () {},
    "isFinite": function () {},
    "isInfinite": function () {},
    "isNaN": function () {},
    "isZero": function () {},
    "log": function () {},
    "mul": function () {},
    "neg": function () {},
    "pow": function () {},
    "re": {},
    "round": function () {},
    "sec": function () {},
    "sech": function () {},
    "sign": function () {},
    "sin": function () {},
    "sinh": function () {},
    "sqrt": function () {},
    "sub": function () {},
    "tan": function () {},
    "tanh": function () {},
    "toString": function () {},
    "toVector": function () {},
    "valueOf": function () {}
  },
  "INFINITY": {
    "abs": function () {},
    "acos": function () {},
    "acosh": function () {},
    "acot": function () {},
    "acoth": function () {},
    "acsc": function () {},
    "acsch": function () {},
    "add": function () {},
    "arg": function () {},
    "asec": function () {},
    "asech": function () {},
    "asin": function () {},
    "asinh": function () {},
    "atan": function () {},
    "atanh": function () {},
    "ceil": function () {},
    "clone": function () {},
    "conjugate": function () {},
    "cos": function () {},
    "cosh": function () {},
    "cot": function () {},
    "coth": function () {},
    "csc": function () {},
    "csch": function () {},
    "div": function () {},
    "equals": function () {},
    "exp": function () {},
    "expm1": function () {},
    "floor": function () {},
    "im": {},
    "inverse": function () {},
    "isFinite": function () {},
    "isInfinite": function () {},
    "isNaN": function () {},
    "isZero": function () {},
    "log": function () {},
    "mul": function () {},
    "neg": function () {},
    "pow": function () {},
    "re": {},
    "round": function () {},
    "sec": function () {},
    "sech": function () {},
    "sign": function () {},
    "sin": function () {},
    "sinh": function () {},
    "sqrt": function () {},
    "sub": function () {},
    "tan": function () {},
    "tanh": function () {},
    "toString": function () {},
    "toVector": function () {},
    "valueOf": function () {}
  },
  "NAN": {
    "abs": function () {},
    "acos": function () {},
    "acosh": function () {},
    "acot": function () {},
    "acoth": function () {},
    "acsc": function () {},
    "acsch": function () {},
    "add": function () {},
    "arg": function () {},
    "asec": function () {},
    "asech": function () {},
    "asin": function () {},
    "asinh": function () {},
    "atan": function () {},
    "atanh": function () {},
    "ceil": function () {},
    "clone": function () {},
    "conjugate": function () {},
    "cos": function () {},
    "cosh": function () {},
    "cot": function () {},
    "coth": function () {},
    "csc": function () {},
    "csch": function () {},
    "div": function () {},
    "equals": function () {},
    "exp": function () {},
    "expm1": function () {},
    "floor": function () {},
    "im": {},
    "inverse": function () {},
    "isFinite": function () {},
    "isInfinite": function () {},
    "isNaN": function () {},
    "isZero": function () {},
    "log": function () {},
    "mul": function () {},
    "neg": function () {},
    "pow": function () {},
    "re": {},
    "round": function () {},
    "sec": function () {},
    "sech": function () {},
    "sign": function () {},
    "sin": function () {},
    "sinh": function () {},
    "sqrt": function () {},
    "sub": function () {},
    "tan": function () {},
    "tanh": function () {},
    "toString": function () {},
    "toVector": function () {},
    "valueOf": function () {}
  },
  "ONE": {
    "abs": function () {},
    "acos": function () {},
    "acosh": function () {},
    "acot": function () {},
    "acoth": function () {},
    "acsc": function () {},
    "acsch": function () {},
    "add": function () {},
    "arg": function () {},
    "asec": function () {},
    "asech": function () {},
    "asin": function () {},
    "asinh": function () {},
    "atan": function () {},
    "atanh": function () {},
    "ceil": function () {},
    "clone": function () {},
    "conjugate": function () {},
    "cos": function () {},
    "cosh": function () {},
    "cot": function () {},
    "coth": function () {},
    "csc": function () {},
    "csch": function () {},
    "div": function () {},
    "equals": function () {},
    "exp": function () {},
    "expm1": function () {},
    "floor": function () {},
    "im": {},
    "inverse": function () {},
    "isFinite": function () {},
    "isInfinite": function () {},
    "isNaN": function () {},
    "isZero": function () {},
    "log": function () {},
    "mul": function () {},
    "neg": function () {},
    "pow": function () {},
    "re": {},
    "round": function () {},
    "sec": function () {},
    "sech": function () {},
    "sign": function () {},
    "sin": function () {},
    "sinh": function () {},
    "sqrt": function () {},
    "sub": function () {},
    "tan": function () {},
    "tanh": function () {},
    "toString": function () {},
    "toVector": function () {},
    "valueOf": function () {}
  },
  "PI": {
    "abs": function () {},
    "acos": function () {},
    "acosh": function () {},
    "acot": function () {},
    "acoth": function () {},
    "acsc": function () {},
    "acsch": function () {},
    "add": function () {},
    "arg": function () {},
    "asec": function () {},
    "asech": function () {},
    "asin": function () {},
    "asinh": function () {},
    "atan": function () {},
    "atanh": function () {},
    "ceil": function () {},
    "clone": function () {},
    "conjugate": function () {},
    "cos": function () {},
    "cosh": function () {},
    "cot": function () {},
    "coth": function () {},
    "csc": function () {},
    "csch": function () {},
    "div": function () {},
    "equals": function () {},
    "exp": function () {},
    "expm1": function () {},
    "floor": function () {},
    "im": {},
    "inverse": function () {},
    "isFinite": function () {},
    "isInfinite": function () {},
    "isNaN": function () {},
    "isZero": function () {},
    "log": function () {},
    "mul": function () {},
    "neg": function () {},
    "pow": function () {},
    "re": {},
    "round": function () {},
    "sec": function () {},
    "sech": function () {},
    "sign": function () {},
    "sin": function () {},
    "sinh": function () {},
    "sqrt": function () {},
    "sub": function () {},
    "tan": function () {},
    "tanh": function () {},
    "toString": function () {},
    "toVector": function () {},
    "valueOf": function () {}
  },
  "ZERO": {
    "abs": function () {},
    "acos": function () {},
    "acosh": function () {},
    "acot": function () {},
    "acoth": function () {},
    "acsc": function () {},
    "acsch": function () {},
    "add": function () {},
    "arg": function () {},
    "asec": function () {},
    "asech": function () {},
    "asin": function () {},
    "asinh": function () {},
    "atan": function () {},
    "atanh": function () {},
    "ceil": function () {},
    "clone": function () {},
    "conjugate": function () {},
    "cos": function () {},
    "cosh": function () {},
    "cot": function () {},
    "coth": function () {},
    "csc": function () {},
    "csch": function () {},
    "div": function () {},
    "equals": function () {},
    "exp": function () {},
    "expm1": function () {},
    "floor": function () {},
    "im": {},
    "inverse": function () {},
    "isFinite": function () {},
    "isInfinite": function () {},
    "isNaN": function () {},
    "isZero": function () {},
    "log": function () {},
    "mul": function () {},
    "neg": function () {},
    "pow": function () {},
    "re": {},
    "round": function () {},
    "sec": function () {},
    "sech": function () {},
    "sign": function () {},
    "sin": function () {},
    "sinh": function () {},
    "sqrt": function () {},
    "sub": function () {},
    "tan": function () {},
    "tanh": function () {},
    "toString": function () {},
    "toVector": function () {},
    "valueOf": function () {}
  }
};
Complex.prototype = {
  "abs": function () {},
  "acos": function () {},
  "acosh": function () {},
  "acot": function () {},
  "acoth": function () {},
  "acsc": function () {},
  "acsch": function () {},
  "add": function () {},
  "arg": function () {},
  "asec": function () {},
  "asech": function () {},
  "asin": function () {},
  "asinh": function () {},
  "atan": function () {},
  "atanh": function () {},
  "ceil": function () {},
  "clone": function () {},
  "conjugate": function () {},
  "cos": function () {},
  "cosh": function () {},
  "cot": function () {},
  "coth": function () {},
  "csc": function () {},
  "csch": function () {},
  "div": function () {},
  "equals": function () {},
  "exp": function () {},
  "expm1": function () {},
  "floor": function () {},
  "im": function () {},
  "inverse": function () {},
  "isFinite": function () {},
  "isInfinite": function () {},
  "isNaN": function () {},
  "isZero": function () {},
  "log": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "re": function () {},
  "round": function () {},
  "sec": function () {},
  "sech": function () {},
  "sign": function () {},
  "sin": function () {},
  "sinh": function () {},
  "sqrt": function () {},
  "sub": function () {},
  "tan": function () {},
  "tanh": function () {},
  "toString": function () {},
  "toVector": function () {},
  "valueOf": function () {}
};
/**********************************************************************
 * End Generated Extern for Complex
/**********************************************************************/
